<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
 
	<!-- Embedded ActiveMQ broker-->
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL"
			value="vm:(broker:(tcp://localhost:61616)?persistent=false)?marshal=false" />
	</bean>

	<!--  JMS Topic -->
	<bean id="chatTopic" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="sampletopic.flex.jms.chat" />
	</bean>

	<!-- Create and populate the tables if the springflexdemodb database -->
	<!--
		<bean id="dbInit"
		class="org.springframework.flex.samples.util.DatabaseInitializer">
		<constructor-arg ref="dataSource" /> </bean> Simple Spring-managed
		DataSource for embedded h2 database (http://www.h2database.com). H2 is
		used instead of HSQLDB in this Test Drive because it has better
		support for retrieving autogenerated keys using the JDBC 3 approach
		which is used by Spring's JdbcTemplate. The
		"jdbc:h2:~/sprinflexdemodb/sprinflexdemodb" URL points to a
		springflexdemodb database in the springdemodb directory under the
		user's directory (represented by ~). H2 creates the database
		automatically if it doesn't exists, in which case, the dbInit bean
		takes care of creating and populating the sample tables. <bean
		id="H2_dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.h2.Driver" /> <property
		name="url" value="jdbc:h2:~/sprinflexdemodb/sprinflexdemodb" />
		</bean>
	-->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/test?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8" />
		<property name="username" value="root" />
		<property name="password" value="keyidaxie" />
	</bean>
	<!--
		Hibernate SessionFactory Definition <bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="mappingResources"> <list>
		<value>com/chenoa/lrs/model/businessobject/Policy.hbm.xml</value>
		<value>com/chenoa/lrs/model/businessobject/ScheduleInforce.hbm.xml</value>
		<value>com/chenoa/lrs/model/businessobject/ScheduleExpired.hbm.xml</value>
		</list> </property> <property name="hibernateProperties"> <props>
		<prop
		key="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</prop>
		<prop key="hibernate.show_sql">true</prop> <prop
		key="hibernate.cglib.use_reflection_optimizer">true</prop> <prop
		key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
		</props> </property> <property name="dataSource"> <ref
		bean="dataSource" /> </property> </bean>
	-->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">create-drop</prop>
			</props>
		</property>
		<property name="annotatedClasses">
			<list>
			<value>org.springframework.flex.samples.company.User</value>
				<value>org.springframework.flex.samples.company.Company</value>
				<value>org.springframework.flex.samples.industry.Industry</value>
			</list>
		</property>
	</bean>
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
</beans>